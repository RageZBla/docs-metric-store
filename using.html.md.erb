---
title: Using PCF Metric Store
owner: Log Cache
---

This topic describes configuring and using PCF Metric Store.

## <a id='overview'></a> Overview

PCF Metric store implements the Prometheus Query Language for querying metrics for which you have access.

## <a id='prerequisites'></a> Prerequisites

- Completed [installation](installing.html) of the PCF Metric Store Tile.
- [curl](https://github.com/curl/curl)
- [CF Auth Token](https://docs.cloudfoundry.org/cf-cli/install-go-cli.html)

## <a id='using'></a> Using PCF Metric Store

### <a id='authorization-authentication'></a> Authorization & Authentication

When querying the API via HTTPS, each request must have the `Authorization`
header set with a UAA provided token.

The scopes `doppler.firehose` and `logs.admin` are authorized as `admin`, and
return data for all relevant source IDs. This authorization is required to
retrieve platform metrics and to execute Label and Series queries.

For more limited scopes, Cloud Controller is consulted to establish app
permissions.

As an admin (`doppler.firehose` or `logs.admin`):

```shell
cf login
curl -vvv -H "Authorization: $(cf oauth-token)" -G https://metric-store.SYSTEM-DOMAIN/api/v1/label/source_id/values
```

The status code will be 200 is everything is working properly.

## Prometheus-Compatible Endpoints

### Notes on PromQL
The ultimate goal of these endpoints is to create a fully-compliant,
Prometheus-compatible interface. This should allow tools such as Grafana to
work directly with PCF Metric Store without any additional translation.

A valid PromQL metric name consists of the character [a-Z][0-9] and underscore. Names can begin with [a-Z] or underscore. Names cannot begin with [0-9].
As a measure to work with existing metrics that do not comply with the above format a conversion process takes place when matching on metric names.
Any character that is not in the set of valid characters is converted to an underscore.
The metric is not changed in the store.

e.g., to match on a metric name ``http.latency`` use the name ``http_latency`` as a search term.

### **GET** `/api/v1/query`

Issues a PromQL instant query against PCF Metric Store data. You can read more
detail in the Prometheus documentation [here](https://prometheus.io/docs/prometheus/latest/querying/api/#instant-queries).

Query Parameters:

- **query** is a [Prometheus expression query string](https://prometheus.io/docs/prometheus/latest/querying/basics/#querying-prometheus).
- **time** is an optional UNIX timestamp in nanoseconds or RFC3339. (e.g. `date -d '24 hours ago' +%s`).

<p class="note"><strong>Note</strong>: Admins (`doppler.firehose` or `logs.admin`) are permitted to use this query without specifying a source_id in the query parameter.</p>

```shell
$ curl -H "Authorization: $(cf oauth-token)" -G "https://metric-store.SYSTEM-DOMAIN/api/v1/query" --data-urlencode 'query=metric_name_0{source_id="source_id_0"}'
```

##### Response Body
```json
{
  "status": "success",
  "data": {
    "resultType": "vector",
    "result": [
      { "metric": {...}, "value": [ <timestamp>, "<value>" ] },
      ...
    ]
  }
}
```

### **GET** `/api/v1/query_range`

Issues a PromQL range query against PCF Metric Store data. You can read more detail
in the Prometheus documentation [here](https://prometheus.io/docs/prometheus/latest/querying/api/#range-queries).

Query Parameters:

- **query** is a [Prometheus expression query string](https://prometheus.io/docs/prometheus/latest/querying/basics/#querying-prometheus).
- **start** is a UNIX timestamp in nanoseconds or RFC3339. (e.g. `date -d '24 hours ago' +%s`). Start time is inclusive. `[start..end)`
- **end** is a UNIX timestamp in nanoseconds or RFC3339. (e.g. `date +%s`). End time is exclusive. `[start..end)`
- **step** is a query resolution step width in `duration` format or float number of seconds.

<p class="note"><strong>Note</strong>: Admins (`doppler.firehose` or `logs.admin`) are permitted to use this query without specifying a source_id in the query parameter.</p>

```shell
$ curl -H "Authorization: $(cf oauth-token)" -G "https://metric-store.SYSTEM-DOMAIN/api/v1/query_range" \
    --data-urlencode 'query=metric_name_0{source_id="source_id_0"}' \
    --data-urlencode "start=$(date -d '24 hours ago' +%s)" \
    --data-urlencode "end=$(date +%s)" \
    --data-urlencode 'step=1h'
```

##### Response Body
```json
{
  "status": "success",
  "data": {
    "resultType": "matrix",
    "result": [
      {
        "metric": {...},
        "values": [
          [ <timestamp>, "<value>" ],
          ...
        ]
      },
      ...
    ]
  }
}
```

### **GET** `/api/v1/series`

Issues a PromQL series query against PCF Metric Store data. You can read more detail
in the Prometheus documentation [here](https://prometheus.io/docs/prometheus/latest/querying/api/#finding-series-by-label-matchers).

<p class="note"><strong>Note</strong>: Non-admins (`doppler.firehose` or `logs.admin`) are not permitted to use this query.</p>

Query Parameters:

- **start** is a UNIX timestamp in nanoseconds or RFC3339. (e.g. `date -d '24 hours ago' +%s`). Start time is inclusive. `[start..end)`
- **end** is a UNIX timestamp in nanoseconds or RFC3339. (e.g. `date +%s`). End time is exclusive. `[start..end)`
- **match[]** is a [series selector](https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors).

```shell
$ curl -H "Authorization: $(cf oauth-token)" -G "https://metric-store.SYSTEM-DOMAIN/api/v1/series" \
    --data-urlencode 'match[]=metric_name_0' \
    --data-urlencode 'match[]=metric_name_1' \
    --data-urlencode "start=$(date -d '24 hours ago' +%s)" \
    --data-urlencode "end=$(date +%s)"
```

##### Response Body
```json
{
  "status": "success",
  "data": [
    {
      "__name__": "metric_name_0",
      "source_id": "source_id_0",
      ...
    },
    ...
  ]
}
```

### **GET** `/api/v1/labels`

Retrieve all label names for authorized source ids from the store.

<p class="note"><strong>Note</strong>: Non-admins (`doppler.firehose` or `logs.admin`) are not permitted to use this query.</p>

##### Request

```shell
$ curl -H "Authorization: $(cf oauth-token)" "https://metric-store.SYSTEM-DOMAIN/api/v1/labels"
```

##### Response Body

```json
{
  "status": "success",
  "data": [
    "__name__",
    "deployment",
    ...
    "ip",
    "origin",
    "request_type",
    "source_id",
    "status_code",
    "unit"
  ]
}
```

### **GET** `/api/v1/label/<label_name>/values`

Retrieve label values by `label_name` for all authorized source ids. The special label `__name__` can be used to retrieve metric names from the store.

<p class="note"><strong>Note</strong>: Non-admins (`doppler.firehose` or `logs.admin`) are not permitted to use this query.</p>

##### Request

```shell
$ curl -H "Authorization: $(cf oauth-token)" "https://metric-store.SYSTEM-DOMAIN/api/v1/label/<label-name>/values"
```

##### Response Body

```json
{
    "status":"success",
    "data":["10", "1"]
}
```

##### Request

```shell
$ curl -H "Authorization: $(cf oauth-token)" "https://metric-store.SYSTEM-DOMAIN/api/v1/label/__name__/values"
```

##### Response Body

```json
{
    "status":"success",
    "data":["metric_name_0", "metric_name_1" ... ]
}
```
